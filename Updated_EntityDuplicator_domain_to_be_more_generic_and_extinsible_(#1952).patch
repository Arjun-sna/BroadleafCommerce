Index: admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminOfferController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminOfferController.java b/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminOfferController.java
--- a/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminOfferController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminOfferController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -17,16 +17,12 @@
  */
 package org.broadleafcommerce.admin.web.controller.entity;
 
-import org.broadleafcommerce.common.persistence.EntityDuplicator;
-import org.broadleafcommerce.common.web.BroadleafRequestContext;
-import org.broadleafcommerce.common.web.JsonResponse;
 import org.broadleafcommerce.core.offer.domain.Offer;
 import org.broadleafcommerce.core.offer.domain.OfferImpl;
 import org.broadleafcommerce.core.offer.service.OfferService;
 import org.broadleafcommerce.core.offer.service.type.OfferType;
 import org.broadleafcommerce.openadmin.web.controller.entity.AdminBasicEntityController;
 import org.broadleafcommerce.openadmin.web.form.entity.EntityForm;
-import org.broadleafcommerce.openadmin.web.form.entity.EntityFormAction;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.util.MultiValueMap;
@@ -37,9 +33,6 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import javax.annotation.Resource;
@@ -62,9 +55,6 @@
     @Resource(name="blOfferService")
     protected OfferService offerService;
 
-    @Resource(name="blEntityDuplicator")
-    protected EntityDuplicator duplicator;
-
     @Override
     protected String getSectionKey(Map<String, String> pathVars) {
         //allow external links to work for ToOne items
@@ -97,7 +87,6 @@
         customCriteria = new String[]{};
         String view = super.viewEntityForm(request, response, model, pathVars, id);
         modifyModelAttributes(model);
-        addDuplicateOption(model, id);
         return view;
     }
     
@@ -123,43 +112,17 @@
         return view;
     }
 
+    /**
+     * @deprecated Moved method to superclass
+     */
+    @Deprecated
+    @Override
     @RequestMapping(value = "/{id}/duplicate", method = RequestMethod.POST)
     public String duplicateEntity(HttpServletRequest request, HttpServletResponse response, Model model,
             @PathVariable  Map<String, String> pathVars, @PathVariable(value="id") String id,
-            @ModelAttribute(value="entityForm") EntityForm entityForm, BindingResult result) throws Exception {
-        if (duplicator.validate(OfferImpl.class, Long.parseLong(id))) {
-            String sectionKey = getSectionKey(pathVars);
-            Offer duplicate;
-            try {
-                duplicate = offerService.duplicate(Long.parseLong(id));
-            } catch (Exception e) {
-                return getErrorDuplicatingResponse(response, "Duplication_Failure");
-            }
-
-            // Note that AJAX Redirects need the context path prepended to them
-            return "ajaxredirect:" + getContextPath(request) + sectionKey + "/" + duplicate.getId();
-        } else {
-            return getErrorDuplicatingResponse(response, "Validation_Failure");
-        }
-    }
-
-    protected String getErrorDuplicatingResponse(HttpServletResponse response, String code) {
-        List<Map<String, Object>> errors = new ArrayList<>();
-        String message;
-        BroadleafRequestContext context = BroadleafRequestContext.getBroadleafRequestContext();
-        if (context != null && context.getMessageSource() != null) {
-            message = context.getMessageSource().getMessage(code, null, code, context.getJavaLocale());
-        } else {
-            LOG.warn("Could not find the MessageSource on the current request, not translating the message key");
-            message = "Duplication_Failure";
-        }
-
-        Map<String, Object> errorMap = new HashMap<>();
-        errorMap.put("errorType", "global");
-        errorMap.put("code", code);
-        errorMap.put("message", message);
-        errors.add(errorMap);
-        return new JsonResponse(response).with("errors", errors).done();
+            @ModelAttribute(value="entityForm") EntityForm entityForm, BindingResult result) 
+            throws Exception {
+        return super.duplicateEntity(request, response, model, pathVars, id, entityForm, result);
     }
 
     /**
@@ -176,14 +139,4 @@
             form.findField("targetItemCriteria").setRequired(true);
         }
     }
-
-    protected void addDuplicateOption(Model model, String id) {
-        if (duplicator.validate(OfferImpl.class, Long.parseLong(id))) {
-            EntityForm form = (EntityForm) model.asMap().get("entityForm");
-            EntityFormAction duplicate = new EntityFormAction("duplicate")
-                    .withButtonClass("duplicate-button")
-                    .withDisplayText("Duplicate");
-            form.addAction(duplicate);
-        }
-    }
 }
Index: admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminProductController.java b/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminProductController.java
--- a/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminProductController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-admin-module/src/main/java/org/broadleafcommerce/admin/web/controller/entity/AdminProductController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -30,7 +30,6 @@
 import org.broadleafcommerce.core.catalog.service.CatalogService;
 import org.broadleafcommerce.openadmin.dto.BasicCollectionMetadata;
 import org.broadleafcommerce.openadmin.dto.ClassMetadata;
-import org.broadleafcommerce.openadmin.dto.ClassTree;
 import org.broadleafcommerce.openadmin.dto.CriteriaTransferObject;
 import org.broadleafcommerce.openadmin.dto.DynamicResultSet;
 import org.broadleafcommerce.openadmin.dto.Entity;
@@ -54,11 +53,12 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
-import java.net.URLDecoder;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+
 import javax.annotation.Resource;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -134,32 +134,14 @@
         if (request.getParameter("entityType") != null) {
             entityType = request.getParameter("entityType");
         }
-        if (StringUtils.isBlank(entityType)) {
-            if (cmd.getPolymorphicEntities().getChildren().length == 0) {
-                entityType = cmd.getPolymorphicEntities().getFullyQualifiedClassname();
-            } else {
-                entityType = getDefaultEntityType();
-            }
-        } else {
-            entityType = URLDecoder.decode(entityType, "UTF-8");
-        }
+        
+        entityType = determineEntityType(entityType, cmd);
 
         if (StringUtils.isBlank(entityType)) {
-            List<ClassTree> entityTypes = getAddEntityTypes(cmd.getPolymorphicEntities());
-            model.addAttribute("entityTypes", entityTypes);
-            model.addAttribute("viewType", "modal/entityTypeSelection");
-            model.addAttribute("entityFriendlyName", cmd.getPolymorphicEntities().getFriendlyName());
-            String requestUri = request.getRequestURI();
-            if (!request.getContextPath().equals("/") && requestUri.startsWith(request.getContextPath())) {
-                requestUri = requestUri.substring(request.getContextPath().length() + 1, requestUri.length());
-            }
-            model.addAttribute("currentUri", requestUri);
-            model.addAttribute("modalHeaderType", ModalHeaderType.ADD_ENTITY.getType());
-            setModelAttributes(model, SECTION_KEY);
-            return "modules/modalContainer";
-        } else {
-            ppr = ppr.withCeilingEntityClassname(entityType);
-        }
+            return getModalForBlankEntityType(request, model, SECTION_KEY, cmd);
+        }
+        
+        ppr = ppr.withCeilingEntityClassname(entityType);
 
         ClassMetadata collectionMetadata = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
         EntityForm entityForm = formService.createEntityForm(collectionMetadata, sectionCrumbs);
@@ -168,6 +150,7 @@
         formService.removeNonApplicableFields(collectionMetadata, entityForm, ppr.getCeilingEntityClassname());
 
         entityForm.removeAction(DefaultEntityFormActions.DELETE);
+        entityForm.removeAction(DefaultEntityFormActions.DUPLICATE);
 
         model.addAttribute("entityForm", entityForm);
         model.addAttribute("viewType", "modal/simpleAddEntity");
@@ -176,7 +159,7 @@
         model.addAttribute("modalHeaderType", ModalHeaderType.ADD_COLLECTION_ITEM.getType());
         model.addAttribute("collectionProperty", collectionProperty);
         setModelAttributes(model, SECTION_KEY);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     @Override
@@ -215,17 +198,14 @@
         Entity entity = service.getRecord(ppr, collectionItemId, collectionMetadata, true).getDynamicResultSet().getRecords()[0];
 
         String currentTabName = getCurrentTabName(pathVars, collectionMetadata);
-        Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForSelectedTab(collectionMetadata, entity, sectionCrumbs, currentTabName);
-        if (entityForm == null) {
-            entityForm = formService.createEntityForm(collectionMetadata, entity, subRecordsMap, sectionCrumbs);
-        } else {
-            entityForm.clearFieldsMap();
-            formService.populateEntityForm(collectionMetadata, entity, subRecordsMap, entityForm, sectionCrumbs);
-            //remove all the actions since we're not trying to redisplay them on the form
-            entityForm.removeAllActions();
-        }
+        Map<String, DynamicResultSet> subRecordsMap = service
+                .getRecordsForSelectedTab(collectionMetadata, entity, sectionCrumbs, currentTabName);
+
+        entityForm = reinitializeEntityForm(entityForm, collectionMetadata, entity, subRecordsMap, 
+                sectionCrumbs);
 
         entityForm.removeAction(DefaultEntityFormActions.DELETE);
+        entityForm.removeAction(DefaultEntityFormActions.DUPLICATE);
 
         // Ensure that operations on the Sku subcollections go to the proper URL
         for (ListGrid lg : entityForm.getAllListGrids()) {
@@ -240,7 +220,7 @@
         model.addAttribute("modalHeaderType", ModalHeaderType.UPDATE_COLLECTION_ITEM.getType());
         model.addAttribute("collectionProperty", collectionProperty);
         setModelAttributes(model, SECTION_KEY);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     @Override
Index: admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/admin/web/controller/AdminAssetUploadController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/admin/web/controller/AdminAssetUploadController.java b/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/admin/web/controller/AdminAssetUploadController.java
--- a/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/admin/web/controller/AdminAssetUploadController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/admin/web/controller/AdminAssetUploadController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -100,7 +100,7 @@
         // We need these attributes to be set appropriately here
         model.addAttribute("entityId", id);
         model.addAttribute("sectionKey", sectionKey);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
     
     @RequestMapping(value = "/{id}/uploadAsset", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
Index: admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/structure/domain/StructuredContentImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/structure/domain/StructuredContentImpl.java b/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/structure/domain/StructuredContentImpl.java
--- a/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/structure/domain/StructuredContentImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/structure/domain/StructuredContentImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -101,6 +101,8 @@
 public class StructuredContentImpl implements StructuredContent, AdminMainEntity, ProfileEntity {
 
     private static final long serialVersionUID = 1L;
+    
+    public static final String SC_DONT_DUPLICATE_SC_TYPE_HINT = "dont-duplicate-sc-type";
 
     @Id
     @GeneratedValue(generator = "StructuredContentId")
@@ -331,21 +333,30 @@
         cloned.setLocale(locale);
         cloned.setOfflineFlag(offlineFlag);
         cloned.setPriority(priority);
+        
         if (structuredContentType != null) {
-            CreateResponse<StructuredContentType> clonedType = structuredContentType.createOrRetrieveCopyInstance(context);
-            cloned.setStructuredContentType(clonedType.getClone());
+            if (Boolean.valueOf(context.getCopyHints().get(SC_DONT_DUPLICATE_SC_TYPE_HINT))) {
+                cloned.setStructuredContentType(structuredContentType);
+            } else {
+                CreateResponse<StructuredContentType> clonedType = 
+                        structuredContentType.createOrRetrieveCopyInstance(context);
+                cloned.setStructuredContentType(clonedType.getClone());
+            }
         }
+        
         for(StructuredContentItemCriteria itemCriteria : qualifyingItemCriteria){
             CreateResponse<StructuredContentItemCriteria> clonedItem = itemCriteria.createOrRetrieveCopyInstance(context);
             StructuredContentItemCriteria clonedCritera = clonedItem.getClone();
             cloned.getQualifyingItemCriteria().add(clonedCritera);
         }
+        
         for(Entry<String, StructuredContentRule> entry : structuredContentMatchRules.entrySet()){
             CreateResponse<StructuredContentRule> clonedItem = entry.getValue().createOrRetrieveCopyInstance(context);
             StructuredContentRule clonedRule = clonedItem.getClone();
             cloned.getStructuredContentMatchRules().put(entry.getKey(),clonedRule);
 
         }
+        
         for(Entry<String, StructuredContentFieldXref> entry : structuredContentFields.entrySet() ){
             CreateResponse<StructuredContentFieldXref> clonedItem = entry.getValue().createOrRetrieveCopyInstance(context);
             StructuredContentFieldXref clonedContentFieldXref = clonedItem.getClone();
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminAbstractController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminAbstractController.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminAbstractController.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminAbstractController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminAbstractController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -86,6 +86,9 @@
 
     public static final String CURRENT_ADMIN_MODULE_ATTRIBUTE_NAME = "currentAdminModule";
     public static final String CURRENT_ADMIN_SECTION_ATTRIBUTE_NAME = "currentAdminSection";
+    
+    public static final String DEFAULT_CONTAINER_VIEW = "modules/defaultContainer";
+    public static final String MODAL_CONTAINER_VIEW = "modules/modalContainer";
 
     // ***********************
     // RESOURCE DECLARATIONS *
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminTranslationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminTranslationController.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminTranslationController.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminTranslationController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/AdminTranslationController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -105,7 +105,7 @@
         model.addAttribute("listGrid", lg);
         model.addAttribute("viewType", "modal/translationListGrid");
         model.addAttribute("modalHeaderType", ModalHeaderType.TRANSLATION.getType());
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     /**
@@ -136,7 +136,7 @@
         model.addAttribute("viewType", "modal/translationAdd");
         model.addAttribute("currentUrl", request.getRequestURL().toString());
         model.addAttribute("modalHeaderType", ModalHeaderType.ADD_TRANSLATION.getType());
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     /**
@@ -198,7 +198,7 @@
             model.addAttribute("viewType", "modal/translationAdd");
             model.addAttribute("currentUrl", request.getRequestURL().toString());
             model.addAttribute("modalHeaderType", ModalHeaderType.ADD_TRANSLATION.getType());
-            return "modules/modalContainer";
+            return MODAL_CONTAINER_VIEW;
         } else {
             return viewTranslation(request, response, model, form, result);
         }
@@ -252,7 +252,7 @@
         model.addAttribute("viewType", "modal/translationAdd");
         model.addAttribute("currentUrl", request.getRequestURL().toString());
         model.addAttribute("modalHeaderType", ModalHeaderType.UPDATE_TRANSLATION.getType());
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     /**
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicEntityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicEntityController.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicEntityController.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicEntityController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicEntityController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -26,9 +26,11 @@
 import org.broadleafcommerce.common.exception.ServiceException;
 import org.broadleafcommerce.common.extension.ExtensionResultHolder;
 import org.broadleafcommerce.common.extension.ExtensionResultStatusType;
+import org.broadleafcommerce.common.persistence.EntityDuplicator;
 import org.broadleafcommerce.common.presentation.client.AddMethodType;
 import org.broadleafcommerce.common.presentation.client.SupportedFieldType;
 import org.broadleafcommerce.common.sandbox.SandBoxHelper;
+import org.broadleafcommerce.common.service.GenericEntityService;
 import org.broadleafcommerce.common.util.BLCArrayUtils;
 import org.broadleafcommerce.common.util.BLCMessageUtils;
 import org.broadleafcommerce.common.web.BroadleafRequestContext;
@@ -87,8 +89,11 @@
 import org.springframework.web.servlet.FlashMap;
 import org.springframework.web.servlet.mvc.support.RedirectAttributes;
 import org.springframework.web.util.UrlPathHelper;
+
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -96,14 +101,15 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+
 import javax.annotation.Resource;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
- * The default implementation of the {@link #BroadleafAdminAbstractEntityController}. This delegates every call to super
- * and does not provide any custom-tailored functionality. It is responsible for rendering the admin for every entity
- * that is not explicitly customized by its own controller.
+ * The default implementation of the {@link AdminAbstractController}. This delegates every call to 
+ * super and does not provide any custom-tailored functionality. It is responsible for rendering the
+ * admin for every entity that is not explicitly customized by its own controller.
  *
  * @author Andre Azzolini (apazzolini)
  * @author Jeff Fischer
@@ -132,6 +138,12 @@
 
     @Resource(name = "blRowLevelSecurityService")
     protected RowLevelSecurityService rowLevelSecurityService;
+    
+    @Resource(name = "blEntityDuplicator")
+    protected EntityDuplicator duplicator;
+    
+    @Resource(name = "blGenericEntityService")
+    protected GenericEntityService genericEntityService;
 
     // ******************************************
     // REQUEST-MAPPING BOUND CONTROLLER METHODS *
@@ -176,7 +188,7 @@
         setupViewEntityListBasicModel(request, cmd, sectionKey, sectionClassName, model, requestParams);
         model.addAttribute("listGrid", listGrid);
 
-        return "modules/defaultContainer";
+        return DEFAULT_CONTAINER_VIEW;
     }
 
     protected void setupViewEntityListBasicModel(HttpServletRequest request, ClassMetadata cmd, String sectionKey,
@@ -256,37 +268,33 @@
         }
     }
 
-    protected boolean isAddActionAllowed(String sectionClassName, ClassMetadata cmd) {
+    protected boolean isAddActionAllowed(final String sectionClassName, final ClassMetadata cmd) {
         // If the user does not have create permissions, we will not add the "Add New" button
-        boolean canCreate = true;
         try {
             adminRemoteSecurityService.securityCheck(sectionClassName, EntityOperationType.ADD);
         } catch (ServiceException e) {
             if (e instanceof SecurityServiceException) {
-                canCreate = false;
+                return false;
             }
         }
 
-        if (canCreate) {
-            checkReadOnly: {
-                //check if all the metadata is read only
-                for (Property property : cmd.getProperties()) {
-                    if (property.getMetadata() instanceof BasicFieldMetadata) {
-                        if (((BasicFieldMetadata) property.getMetadata()).getReadOnly() == null ||
-                                !((BasicFieldMetadata) property.getMetadata()).getReadOnly()) {
-                            break checkReadOnly;
-                        }
-                    }
+        final boolean canAdd = rowLevelSecurityService
+                .canAdd(adminRemoteSecurityService.getPersistentAdminUser(), sectionClassName, cmd);
+        return isNotReadOnly(cmd) && canAdd;
+    }
+    
+    protected boolean isNotReadOnly(final ClassMetadata cmd) {
+        //check if all the metadata is read only
+        for (Property property : cmd.getProperties()) {
+            if (property.getMetadata() instanceof BasicFieldMetadata) {
+                if (((BasicFieldMetadata) property.getMetadata()).getReadOnly() == null ||
+                        !((BasicFieldMetadata) property.getMetadata()).getReadOnly()) {
+                    return true;
                 }
-                canCreate = false;
             }
         }
-
-        if (canCreate) {
-            canCreate = rowLevelSecurityService.canAdd(adminRemoteSecurityService.getPersistentAdminUser(), sectionClassName, cmd);
-        }
-
-        return canCreate;
+        
+        return false;
     }
 
     /**
@@ -313,17 +321,8 @@
         PersistencePackageRequest ppr = getSectionPersistencePackageRequest(sectionClassName, sectionCrumbs, pathVars);
         ppr.setAddOperationInspect(true);
         ClassMetadata cmd = service.getClassMetadata(ppr).getDynamicResultSet().getClassMetaData();
-
-        // If the entity type isn't specified, we need to determine if there are various polymorphic types for this entity.
-        if (StringUtils.isBlank(entityType)) {
-            if (cmd.getPolymorphicEntities().getChildren().length == 0) {
-                entityType = cmd.getPolymorphicEntities().getFullyQualifiedClassname();
-            } else {
-                entityType = getDefaultEntityType();
-            }
-        } else {
-            entityType = URLDecoder.decode(entityType, "UTF-8");
-        }
+        
+        entityType = determineEntityType(entityType, cmd);
 
         EntityForm entityForm = formService.createEntityForm(cmd, sectionCrumbs);
 
@@ -346,7 +345,23 @@
         model.addAttribute("currentUrl", request.getRequestURL().toString());
         model.addAttribute("modalHeaderType", ModalHeaderType.ADD_ENTITY.getType());
         setModelAttributes(model, sectionKey);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
+    }
+
+    // If the entity type isn't specified, we need to determine if there are various polymorphic 
+    // types for this entity.
+    protected String determineEntityType(String entityType, final ClassMetadata cmd) 
+            throws UnsupportedEncodingException {
+        if (StringUtils.isBlank(entityType)) {
+            if (cmd.getPolymorphicEntities().getChildren().length == 0) {
+                entityType = cmd.getPolymorphicEntities().getFullyQualifiedClassname();
+            } else {
+                entityType = getDefaultEntityType();
+            }
+        } else {
+            entityType = URLDecoder.decode(entityType, "UTF-8");
+        }
+        return entityType;
     }
 
     /**
@@ -388,13 +403,67 @@
             model.addAttribute("modalHeaderType", ModalHeaderType.ADD_ENTITY.getType());
             model.addAttribute("entityFriendlyName", cmd.getPolymorphicEntities().getFriendlyName());
             setModelAttributes(model, sectionKey);
-            return "modules/modalContainer";
+            return MODAL_CONTAINER_VIEW;
         }
 
         // Note that AJAX Redirects need the context path prepended to them
         return "ajaxredirect:" + getContextPath(request) + sectionKey + "/" + entity.getPMap().get("id").getValue();
     }
 
+    @RequestMapping(value = "/{id}/duplicate", method = RequestMethod.POST)
+    public String duplicateEntity(final HttpServletRequest request,
+            final HttpServletResponse response, 
+            final Model model,
+            @PathVariable final Map<String, String> pathVars,
+            @PathVariable(value = "id") final String id,
+            @ModelAttribute(value = "entityForm") final EntityForm entityForm,
+            final BindingResult result) throws Exception {
+        final String sectionKey = getSectionKey(pathVars);
+        final String sectionClassName = getClassNameForSection(sectionKey);
+        final Class<?> entityClass = dynamicEntityDao.getImplClass(sectionClassName);
+        final long identifier = Long.parseLong(id);
+        
+        if (duplicator.validate(entityClass, identifier)) {
+            final Object duplicate;
+            
+            try {
+                duplicate = duplicator.copy(entityClass, identifier);
+            } catch (Exception e) {
+                LOG.error("Could not duplicate entity", e);
+                return getErrorDuplicatingResponse(response, "Duplication_Failure");
+            }
+
+            final Serializable dupId = genericEntityService.getIdentifier(duplicate);
+            
+            // Note that AJAX Redirects need the context path prepended to them
+            return "ajaxredirect:" + getContextPath(request) + sectionKey + "/" + dupId;
+        } else {
+            return getErrorDuplicatingResponse(response, "Validation_Failure");
+        }
+    }
+
+    protected String getErrorDuplicatingResponse(HttpServletResponse response, String code) {
+        List<Map<String, Object>> errors = new ArrayList<>();
+        String message;
+        BroadleafRequestContext context = BroadleafRequestContext.getBroadleafRequestContext();
+        if (context != null && context.getMessageSource() != null) {
+            message = context.getMessageSource()
+                    .getMessage(code, null, code, context.getJavaLocale());
+        } else {
+            LOG.warn(
+                    "Could not find the MessageSource on the current request, " 
+                            + "not translating the message key");
+            message = "Duplication_Failure";
+        }
+
+        Map<String, Object> errorMap = new HashMap<>();
+        errorMap.put("errorType", "global");
+        errorMap.put("code", code);
+        errorMap.put("message", message);
+        errors.add(errorMap);
+        return new JsonResponse(response).with("errors", errors).done();
+    }
+
     /**
      * Renders the main entity form for the specified entity
      *
@@ -422,11 +491,7 @@
 
         EntityForm entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);
 
-        if (isAddRequest(entity)) {
-            modifyAddEntityForm(entityForm, pathVars);
-        } else {
-            modifyEntityForm(entityForm, pathVars);
-        }
+        modifyEntityForm(entity, entityForm, pathVars);
 
         if (request.getParameter("headerFlash") != null) {
             model.addAttribute("headerFlash", request.getParameter("headerFlash"));
@@ -451,16 +516,7 @@
         // We want to replace author ids with their names
         addAuditableDisplayFields(entityForm);
 
-        if (isAjaxRequest(request)) {
-            entityForm.setReadOnly();
-            model.addAttribute("viewType", "modal/entityView");
-            model.addAttribute("modalHeaderType", ModalHeaderType.VIEW_ENTITY.getType());
-            return "modules/modalContainer";
-        } else {
-            model.addAttribute("useAjaxUpdate", true);
-            model.addAttribute("viewType", "entityEdit");
-            return "modules/defaultContainer";
-        }
+        return resolveAppropriateEntityView(request, model, entityForm);
     }
 
     protected Map<String, DynamicResultSet> getViewSubRecords(HttpServletRequest request, Map<String, String> pathVars,
@@ -513,11 +569,7 @@
         Map<String, DynamicResultSet> subRecordsMap = getViewSubRecords(request, pathVars, cmd, entity, crumbs);
         entityForm = formService.createEntityForm(cmd, entity, subRecordsMap, crumbs);
 
-        if (isAddRequest(entity)) {
-            modifyAddEntityForm(entityForm, pathVars);
-        } else {
-            modifyEntityForm(entityForm, pathVars);
-        }
+        modifyEntityForm(entity, entityForm, pathVars);
 
         model.addAttribute("entity", entity);
         model.addAttribute("entityForm", entityForm);
@@ -527,7 +579,8 @@
 
         model.addAttribute("useAjaxUpdate", true);
         model.addAttribute("viewType", "entityEdit");
-        return "modules/defaultContainer";
+        
+        return DEFAULT_CONTAINER_VIEW;
     }
 
     /**
@@ -627,6 +680,7 @@
         Entity entity = service.updateEntity(entityForm, sectionCriteria, sectionCrumbs).getEntity();
 
         entityFormValidator.validate(entityForm, entity, result);
+        
         if (result.hasErrors()) {
             model.addAttribute("headerFlash", "save.unsuccessful");
             model.addAttribute("headerFlashAlert", true);
@@ -635,32 +689,43 @@
             entityForm.clearFieldsMap();
             formService.populateEntityForm(cmd, entity, subRecordsMap, entityForm, sectionCrumbs);
 
-            if (isAddRequest(entity)) {
-                modifyAddEntityForm(entityForm, pathVars);
-            } else {
-                modifyEntityForm(entityForm, pathVars);
-            }
-
-            model.addAttribute("entity", entity);
-            model.addAttribute("currentUrl", request.getRequestURL().toString());
+            modifyEntityForm(entity, entityForm, pathVars);
+
+            model.addAttribute("entity", entity);
+            model.addAttribute("currentUrl", request.getRequestURL().toString());
+
+            setModelAttributes(model, sectionKey);
+
+            return resolveAppropriateEntityView(request, model, entityForm);
+        }
+
+        ra.addFlashAttribute("headerFlash", "save.successful");
+
+        return "redirect:/" + sectionKey + "/" + id;
+    }
+    
+    protected void modifyEntityForm(final Entity entity, final EntityForm entityForm, 
+            final Map<String, String> pathVars) throws Exception {
+        if (isAddRequest(entity)) {
+            modifyAddEntityForm(entityForm, pathVars);
+        } else {
+            modifyEntityForm(entityForm, pathVars);
+        }
+    }
 
-            setModelAttributes(model, sectionKey);
-
-            if (isAjaxRequest(request)) {
-                entityForm.setReadOnly();
-                model.addAttribute("viewType", "modal/entityView");
-                model.addAttribute("modalHeaderType", ModalHeaderType.VIEW_ENTITY.getType());
-                return "modules/modalContainer";
-            } else {
-                model.addAttribute("useAjaxUpdate", true);
-                model.addAttribute("viewType", "entityEdit");
-                return "modules/defaultContainer";
-            }
+    protected String resolveAppropriateEntityView(final HttpServletRequest request,
+            final Model model,
+            final @ModelAttribute(value = "entityForm") EntityForm entityForm) {
+        if (isAjaxRequest(request)) {
+            entityForm.setReadOnly();
+            model.addAttribute("viewType", "modal/entityView");
+            model.addAttribute("modalHeaderType", ModalHeaderType.VIEW_ENTITY.getType());
+            return MODAL_CONTAINER_VIEW;
+        } else {
+            model.addAttribute("useAjaxUpdate", true);
+            model.addAttribute("viewType", "entityEdit");
+            return DEFAULT_CONTAINER_VIEW;
         }
-
-        ra.addFlashAttribute("headerFlash", "save.successful");
-
-        return "redirect:/" + sectionKey + "/" + id;
     }
 
     /**
@@ -925,35 +990,18 @@
                 // If the entity type isn't specified, we need to determine if there are various polymorphic types
                 // for this entity.
                 String entityType = null;
+                
                 if (requestParams.containsKey("entityType")) {
                     entityType = requestParams.get("entityType").get(0);
                 }
-                if (StringUtils.isBlank(entityType)) {
-                    if (cmd.getPolymorphicEntities().getChildren().length == 0) {
-                        entityType = cmd.getPolymorphicEntities().getFullyQualifiedClassname();
-                    } else {
-                        entityType = getDefaultEntityType();
-                    }
-                } else {
-                    entityType = URLDecoder.decode(entityType, "UTF-8");
-                }
+                
+                entityType = determineEntityType(entityType, cmd);
 
                 if (StringUtils.isBlank(entityType)) {
-                    List<ClassTree> entityTypes = getAddEntityTypes(cmd.getPolymorphicEntities());
-                    model.addAttribute("entityTypes", entityTypes);
-                    model.addAttribute("viewType", "modal/entityTypeSelection");
-                    model.addAttribute("entityFriendlyName", cmd.getPolymorphicEntities().getFriendlyName());
-                    String requestUri = request.getRequestURI();
-                    if (!request.getContextPath().equals("/") && requestUri.startsWith(request.getContextPath())) {
-                        requestUri = requestUri.substring(request.getContextPath().length() + 1, requestUri.length());
-                    }
-                    model.addAttribute("currentUri", requestUri);
-                    model.addAttribute("modalHeaderType", ModalHeaderType.ADD_ENTITY.getType());
-                    setModelAttributes(model, sectionKey);
-                    return "modules/modalContainer";
-                } else {
-                    ppr = ppr.withCeilingEntityClassname(entityType);
-                }
+                    return getModalForBlankEntityType(request, model, sectionKey, cmd);
+                } 
+                
+                ppr = ppr.withCeilingEntityClassname(entityType);
             }
         } else if (md instanceof MapMetadata) {
             ExtensionResultStatusType result = extensionManager.getProxy().modifyModelForAddCollectionType(request,response,model,sectionKey,id,requestParams,(MapMetadata) md);
@@ -961,17 +1009,36 @@
                 model.addAttribute("entityId", id);
                 model.addAttribute("sectionKey", sectionKey);
                 model.addAttribute("collectionField", collectionField);
-                return "modules/modalContainer";
+                return MODAL_CONTAINER_VIEW;
             }
         }
-
-        //service.getContextSpecificRelationshipId(mainMetadata, entity, prefix);
 
         model.addAttribute("currentParams", new ObjectMapper().writeValueAsString(requestParams));
 
         return buildAddCollectionItemModel(request, response, model, id, collectionField, sectionKey, collectionProperty, md, ppr, null, null);
     }
+    
+    protected String getModalForBlankEntityType(final HttpServletRequest request, 
+            final Model model, final String sectionKey, final ClassMetadata cmd) {
+        final List<ClassTree> entityTypes = getAddEntityTypes(cmd.getPolymorphicEntities());
+        model.addAttribute("entityTypes", entityTypes);
+        model.addAttribute("viewType", "modal/entityTypeSelection");
+        model.addAttribute("entityFriendlyName", cmd.getPolymorphicEntities().getFriendlyName());
+        
+        String requestUri = request.getRequestURI();
+        final String contextPath = request.getContextPath();
+        
+        if (!contextPath.equals("/") && requestUri.startsWith(contextPath)) {
+            requestUri = requestUri.substring(contextPath.length() + 1, requestUri.length());
+        }
 
+        model.addAttribute("currentUri", requestUri);
+        model.addAttribute("modalHeaderType", ModalHeaderType.ADD_ENTITY.getType());
+        setModelAttributes(model, sectionKey);
+        
+        return MODAL_CONTAINER_VIEW;
+    }
+
     @RequestMapping(value = "/{id}/{collectionField:.*}/add/{collectionItemId}/verify", method = RequestMethod.POST)
     public @ResponseBody Map<String, Object> addCollectionItem(HttpServletRequest request, HttpServletResponse response, Model model,
             @PathVariable Map<String, String> pathVars,
@@ -1317,7 +1384,7 @@
         model.addAttribute("modalHeaderType", ModalHeaderType.ADD_COLLECTION_ITEM.getType());
         model.addAttribute("collectionProperty", collectionProperty);
         setModelAttributes(model, sectionKey);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     /**
@@ -1434,8 +1501,16 @@
      * @return
      * @throws ServiceException
      */
-    protected String showViewUpdateCollection(HttpServletRequest request, Model model, Map<String, String> pathVars,
-            String id, String collectionField, String collectionItemId, String alternateId, String modalHeaderType, EntityForm entityForm, Entity entity) throws ServiceException {
+    protected String showViewUpdateCollection(HttpServletRequest request, 
+            Model model, 
+            Map<String, String> pathVars,
+            String id, 
+            String collectionField, 
+            String collectionItemId, 
+            String alternateId, 
+            String modalHeaderType, 
+            EntityForm entityForm, 
+            Entity entity) throws ServiceException {
         String sectionKey = getSectionKey(pathVars);
         String mainClassName = getClassNameForSection(sectionKey);
         List<SectionCrumb> sectionCrumbs = getSectionCrumbs(request, sectionKey, id);
@@ -1470,15 +1545,13 @@
 
             String currentTabName = getCurrentTabName(pathVars, collectionMetadata);
             Map<String, DynamicResultSet> subRecordsMap = service.getRecordsForSelectedTab(collectionMetadata, entity, sectionCrumbs, currentTabName);
-            if (entityForm == null) {
-                entityForm = formService.createEntityForm(collectionMetadata, entity, subRecordsMap, sectionCrumbs);
-            } else {
-                entityForm.clearFieldsMap();
-                formService.populateEntityForm(collectionMetadata, entity, subRecordsMap, entityForm, sectionCrumbs);
-                //remove all the actions since we're not trying to redisplay them on the form
-                entityForm.removeAllActions();
-            }
+            
+            entityForm = reinitializeEntityForm(entityForm, collectionMetadata, entity, 
+                    subRecordsMap, sectionCrumbs);
+            
             entityForm.removeAction(DefaultEntityFormActions.DELETE);
+            entityForm.removeAction(DefaultEntityFormActions.DUPLICATE);
+            
             addAuditableDisplayFields(entityForm);
             model.addAttribute("entityForm", entityForm);
             model.addAttribute("viewType", "modal/simpleEditEntity");
@@ -1601,7 +1674,26 @@
         model.addAttribute("modalHeaderType", modalHeaderType);
         model.addAttribute("collectionProperty", collectionProperty);
         setModelAttributes(model, sectionKey);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
+    }
+    
+    protected EntityForm reinitializeEntityForm(final EntityForm entityForm, 
+            final ClassMetadata collectionMetadata,
+            final Entity entity,
+            final Map<String, DynamicResultSet> subRecordsMap,
+            final List<SectionCrumb> sectionCrumbs) throws ServiceException {
+        if (entityForm == null) {
+            return formService
+                    .createEntityForm(collectionMetadata, entity, subRecordsMap, sectionCrumbs);
+        }
+        
+        entityForm.clearFieldsMap();
+        formService.populateEntityForm(collectionMetadata, entity, subRecordsMap, entityForm,
+                sectionCrumbs);
+        //remove all the actions since we're not trying to redisplay them on the form
+        entityForm.removeAllActions();
+    
+        return entityForm;
     }
 
     /**
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicOperationsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicOperationsController.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicOperationsController.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicOperationsController.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/controller/entity/AdminBasicOperationsController.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -154,7 +154,7 @@
         model.addAttribute("collectionProperty", collectionProperty);
         model.addAttribute("sectionCrumbs", request.getParameter("sectionCrumbs"));
         setModelAttributes(model, owningClass);
-        return "modules/modalContainer";
+        return MODAL_CONTAINER_VIEW;
     }
 
     @RequestMapping(value = "/{owningClass:.*}/{collectionField:.*}/typeahead", method = RequestMethod.GET)
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/DefaultEntityFormActions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/DefaultEntityFormActions.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/DefaultEntityFormActions.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/DefaultEntityFormActions.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/DefaultEntityFormActions.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -33,5 +33,9 @@
     public static final EntityFormAction PREVIEW = new EntityFormAction(EntityFormAction.PREVIEW)
         .withButtonClass("preview-button")
         .withDisplayText("Preview");
+    
+    public static final EntityFormAction DUPLICATE = new EntityFormAction(EntityFormAction.DUPLICATE)
+            .withButtonClass("duplicate-button")
+            .withDisplayText("Duplicate");
 
 }
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/EntityFormAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/EntityFormAction.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/EntityFormAction.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/EntityFormAction.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/form/entity/EntityFormAction.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -27,6 +27,7 @@
     public static final String SAVE = "SAVE";
     public static final String DELETE = "DELETE";
     public static final String PREVIEW = "PREVIEW";
+    public static final String DUPLICATE = "DUPLICATE";
 
     protected String buttonType = "button";
     protected String buttonClass = "";
@@ -184,7 +185,7 @@
      * This is a manual override for the data-actionurl attribute for an listgrid action. The data-actionurl attribute on a
      * button is normally automatically computed by appending the postfix URL to the path of the list grid
      * 
-     * @param actionUrlOverride
+     * @param urlOverride
      */
     public void setUrlOverride(String urlOverride) {
         this.urlOverride = urlOverride;
Index: admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/service/FormBuilderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/service/FormBuilderServiceImpl.java b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/service/FormBuilderServiceImpl.java
--- a/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/service/FormBuilderServiceImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/web/service/FormBuilderServiceImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -31,6 +31,7 @@
 import org.broadleafcommerce.common.extension.ExtensionResultStatusType;
 import org.broadleafcommerce.common.media.domain.MediaDto;
 import org.broadleafcommerce.common.persistence.EntityConfiguration;
+import org.broadleafcommerce.common.persistence.EntityDuplicator;
 import org.broadleafcommerce.common.presentation.client.AddMethodType;
 import org.broadleafcommerce.common.presentation.client.AdornedTargetAddMethodType;
 import org.broadleafcommerce.common.presentation.client.LookupType;
@@ -57,6 +58,7 @@
 import org.broadleafcommerce.openadmin.dto.Property;
 import org.broadleafcommerce.openadmin.dto.SectionCrumb;
 import org.broadleafcommerce.openadmin.dto.TabMetadata;
+import org.broadleafcommerce.openadmin.server.dao.DynamicEntityDao;
 import org.broadleafcommerce.openadmin.server.domain.PersistencePackageRequest;
 import org.broadleafcommerce.openadmin.server.security.domain.AdminSection;
 import org.broadleafcommerce.openadmin.server.security.domain.AdminUser;
@@ -98,9 +100,11 @@
 import org.springframework.context.MessageSource;
 import org.springframework.context.NoSuchMessageException;
 import org.springframework.stereotype.Service;
+
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.module.SimpleModule;
+
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.text.DateFormat;
@@ -117,6 +121,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+
 import javax.annotation.Resource;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToOne;
@@ -160,6 +165,12 @@
     @Resource(name = "blAdminNavigationService")
     protected AdminNavigationService adminNavigationService;
 
+    @Resource(name = "blEntityDuplicator")
+    protected EntityDuplicator duplicator;
+
+    @Resource(name = "blDynamicEntityDao")
+    protected DynamicEntityDao dynamicEntityDao;
+
     protected static final VisibilityEnum[] FORM_HIDDEN_VISIBILITIES = new VisibilityEnum[] { 
             VisibilityEnum.HIDDEN_ALL, VisibilityEnum.FORM_HIDDEN
     };
@@ -1576,6 +1587,7 @@
         }
         
         addDeleteActionIfAllowed(ef, cmd, entity);
+        addDuplicateActionIfAllowed(ef, cmd);
         setReadOnlyState(ef, cmd, entity);
 
         // check for fields that should be hidden based on annotations
@@ -1602,28 +1614,52 @@
      * @see {@link RowLevelSecurityService#canRemove(AdminUser, Entity)}
      */
     protected void addDeleteActionIfAllowed(EntityForm entityForm, ClassMetadata cmd, Entity entity) {
-        boolean canDelete = true;
+        if (isDeletionAllowed(entityForm, cmd, entity)) {
+            entityForm.addAction(DefaultEntityFormActions.DELETE);
+        }
+    }
+    
+    protected boolean isDeletionAllowed(final EntityForm entityForm, final ClassMetadata cmd, 
+            final Entity entity) {
         try {
             String securityEntityClassname = getSecurityClassname(entityForm, cmd);
-            adminRemoteSecurityService.securityCheck(securityEntityClassname, EntityOperationType.REMOVE);
+            adminRemoteSecurityService
+                    .securityCheck(securityEntityClassname, EntityOperationType.REMOVE);
         } catch (ServiceException e) {
             if (e instanceof SecurityServiceException) {
-                canDelete = false;
+                return false;
             }
         }
+
+        final AdminUser persistentAdminUser = adminRemoteSecurityService.getPersistentAdminUser();
         
-        // If I cannot update a record then I certainly cannot delete it either
-        if (canDelete) {
-            canDelete = rowLevelSecurityService.canUpdate(adminRemoteSecurityService.getPersistentAdminUser(), entity);
-        }
-        
-        if (canDelete) {
-            canDelete = rowLevelSecurityService.canRemove(adminRemoteSecurityService.getPersistentAdminUser(), entity);
+        return rowLevelSecurityService.canUpdate(persistentAdminUser, entity)
+                && rowLevelSecurityService.canRemove(persistentAdminUser, entity);
+    }
+    
+    protected void addDuplicateActionIfAllowed(final EntityForm entityForm,
+            final ClassMetadata cmd) {
+        if (isDuplicationAllowed(entityForm, cmd)) {
+            entityForm.addAction(DefaultEntityFormActions.DUPLICATE);
         }
-        
-        if (canDelete) {
-            entityForm.addAction(DefaultEntityFormActions.DELETE);
+    }
+
+    protected boolean isDuplicationAllowed(final EntityForm entityForm, final ClassMetadata cmd) {
+        final String securityClassname = getSecurityClassname(entityForm, cmd);
+
+        try {
+            adminRemoteSecurityService.securityCheck(securityClassname, EntityOperationType.ADD);
+        } catch (ServiceException e) {
+            if (e instanceof SecurityServiceException) {
+                return false;
+            }
         }
+
+        final Class<?> entityClass = dynamicEntityDao.getImplClass(securityClassname);
+        
+        return duplicator.validate(entityClass, Long.valueOf(entityForm.getId())) && 
+                rowLevelSecurityService.canAdd(adminRemoteSecurityService.getPersistentAdminUser(), 
+                        securityClassname, cmd);
     }
     
     /**
Index: common/src/main/java/org/broadleafcommerce/common/dao/GenericEntityDaoImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/dao/GenericEntityDaoImpl.java b/common/src/main/java/org/broadleafcommerce/common/dao/GenericEntityDaoImpl.java
--- a/common/src/main/java/org/broadleafcommerce/common/dao/GenericEntityDaoImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/common/src/main/java/org/broadleafcommerce/common/dao/GenericEntityDaoImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -35,7 +35,6 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
 import org.springframework.stereotype.Repository;
-import org.springframework.transaction.support.TransactionSynchronizationAdapter;
 
 import java.io.Serializable;
 import java.lang.reflect.Field;
Index: common/src/main/java/org/broadleafcommerce/common/persistence/AbstractEntityDuplicationHelper.java
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/persistence/AbstractEntityDuplicationHelper.java b/common/src/main/java/org/broadleafcommerce/common/persistence/AbstractEntityDuplicationHelper.java
new file mode 100644
--- /dev/null	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
+++ b/common/src/main/java/org/broadleafcommerce/common/persistence/AbstractEntityDuplicationHelper.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -0,0 +1,69 @@
+/*
+ * #%L
+ * BroadleafCommerce Common Libraries
+ * %%
+ * Copyright (C) 2009 - 2018 Broadleaf Commerce
+ * %%
+ * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0
+ * (the "Fair Use License" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)
+ * unless the restrictions on use therein are violated and require payment to Broadleaf in which case
+ * the Broadleaf End User License Agreement (EULA), Version 1.1
+ * (the "Commercial License" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)
+ * shall apply.
+ * 
+ * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the "Custom License")
+ * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.
+ * #L%
+ */
+package org.broadleafcommerce.common.persistence;
+
+import org.broadleafcommerce.common.copy.MultiTenantCloneable;
+import org.springframework.core.env.Environment;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Implements {@link #getCopyHints()} and {@link #addCopyHint(String, String)}, 
+ * using a {@link HashMap} as the underlying data structure for storing the hints. Also provides a
+ * helper method {@link #getCopySuffix()} for the usual use-case of changing the name of the 
+ * duplicated entity.
+ * 
+ * @author Nathan Moore (nathanmoore).
+ */
+public abstract class AbstractEntityDuplicationHelper<T> implements EntityDuplicationHelper<T> {
+    
+    protected Map<String, String> copyHints = new HashMap<>();
+    
+    protected final Environment env;
+    
+    public AbstractEntityDuplicationHelper(final Environment environment) {
+        this.env = environment;
+    }
+
+    /**
+     * Defaults to " - Copy" but can be overridden using 
+     * {@code admin.entity.duplication.suffix.default}. 
+     * 
+     * @return suffix to append to the name/identifier of the entity copy
+     */
+    protected String getCopySuffix() {
+        return env.getProperty("admin.entity.duplication.suffix.default", String.class, " - Copy");
+    }
+    
+    @Override 
+    public abstract boolean canHandle(final MultiTenantCloneable candidate);
+
+    @Override 
+    public Map<String, String> getCopyHints() {
+        return copyHints;
+    }
+
+    @Override 
+    public void addCopyHint(final String name, final String hint) {
+        copyHints.put(name, hint);
+    }
+
+    @Override 
+    public abstract void modifyInitialDuplicateState(final T copy);
+}
Index: common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicateModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicateModifier.java b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicateModifier.java
--- a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicateModifier.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicateModifier.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -18,9 +18,7 @@
 package org.broadleafcommerce.common.persistence;
 
 /**
- * Perform final modifications on a duplicated entity before persistence.
- *
- * @author Jeff Fischer
+ * @deprecated Implement {@link EntityDuplicationHelper} instead
  */
 public interface EntityDuplicateModifier<T> {
 
Index: common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicationHelper.java
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicationHelper.java b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicationHelper.java
new file mode 100644
--- /dev/null	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
+++ b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicationHelper.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -0,0 +1,45 @@
+/*
+ * #%L
+ * BroadleafCommerce Common Libraries
+ * %%
+ * Copyright (C) 2009 - 2018 Broadleaf Commerce
+ * %%
+ * Licensed under the Broadleaf Fair Use License Agreement, Version 1.0
+ * (the "Fair Use License" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)
+ * unless the restrictions on use therein are violated and require payment to Broadleaf in which case
+ * the Broadleaf End User License Agreement (EULA), Version 1.1
+ * (the "Commercial License" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)
+ * shall apply.
+ * 
+ * Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the "Custom License")
+ * between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.
+ * #L%
+ */
+package org.broadleafcommerce.common.persistence;
+
+import org.broadleafcommerce.common.copy.MultiTenantCloneable;
+
+import java.util.Map;
+
+/**
+ * Provides additional metadata and performs final modifications for an entity before persistence.
+ * 
+ * In order to perform duplication using {@link EntityDuplicator}, an 
+ * {@code EntityDuplicationHelper} must be made for a specific entity.
+ * 
+ * @author Nathan Moore (nathanmoore).
+ */
+public interface EntityDuplicationHelper<T> {
+
+    boolean canHandle(MultiTenantCloneable candidate);
+
+    /**
+     * @return Hints used to fine tune copying - generally support for hints is included in 
+     * {@link org.broadleafcommerce.common.copy.MultiTenantCloneable#createOrRetrieveCopyInstance(org.broadleafcommerce.common.copy.MultiTenantCopyContext)} implementations.
+     */
+    Map<String, String> getCopyHints();
+    
+    void addCopyHint(final String name, final String hint);
+
+    void modifyInitialDuplicateState(T copy);
+}
Index: common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicator.java b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicator.java
--- a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicator.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicator.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -23,57 +23,96 @@
 import java.util.Map;
 
 /**
- * Create a production duplicate of an entity. In the case of the enterprise module, the entity to be duplicated may not
- * be a sandbox copy. In the case of the multitenant module, the entity to be duplicated must not be referenced in a derived
- * catalog (apart from a standard site override) and must not be owned by another site.
+ * <p>
+ *      Creates a production duplicate of an entity. In the case of the enterprise module, the 
+ *      entity to be duplicated may not be a sandbox copy. In the case of the multitenant module, 
+ *      the entity to be duplicated must not be referenced in a derived catalog (apart from a 
+ *      standard site override) and must not be owned by another site.
+ * </p>
  * </p>
- * The feature must first be enabled before use. To enable, add the following property to your Spring property file:
+ *      The feature must first be enabled before use. To enable, add the following property to your 
+ *      Spring property file: {@code admin.entity.duplication.isactive=true}. Furthermore, 
+ *      for any entity you wish to be able to duplicate, you must implement an
+ *      {@link EntityDuplicationHelper}. Consider extending {@link AbstractEntityDuplicationHelper} 
+ *      because it implements {@link EntityDuplicationHelper#getCopyHints()} and 
+ *      {@link EntityDuplicationHelper#addCopyHint(String, String)} for you. 
  * </p>
- * {@code admin.entity.duplication.isactive=true}
+ * <p>
+ *     CopyHints can be added to change the behavior of 
+ *     {@link MultiTenantCloneable#createOrRetrieveCopyInstance(MultiTenantCopyContext)} for a
+ *     specific entity. See {@code org.broadleafcommerce.core.offer.service.OfferDuplicateModifier}
+ *     and {@code org.broadleafcommerce.core.offer.domain.OfferImpl} for an example.
+ * </p>
  *
  * @author Jeff Fischer
  */
 public interface EntityDuplicator {
 
     /**
-     * Validate whether or not this feature is enabled and whether or not the passed entity params are valid for duplication.
+     * Validate whether or not this feature is enabled and whether the passed entity params are 
+     * valid for duplication.
      *
      * @param entityClass
      * @param id
+     *
      * @return
      */
     boolean validate(Class<?> entityClass, Long id);
 
     /**
-     * Validate whether or not this feature is enabled and whether or not the passed entity params are valid for duplication.
+     * Validate whether or not this feature is enabled and whether or not the passed entity params 
+     * are valid for duplication.
      *
      * @param entity
+     *
      * @return
      */
     boolean validate(Object entity);
 
     /**
-     * Create a production duplicate of the entity specified in the params. The is the most oft used copy method.
+     * @deprecated use {@link #copy(Class, Long)}. Modifiers have been moved to a list bean 
+     * to allow easier inclusion (see {@code EntityDuplicationHelpers}) and copy hints can be added 
+     * to implementations of {@link EntityDuplicationHelper}s
+     */
+    @Deprecated
+    <T> T copy(Class<T> entityClass,
+            Long id,
+            Map<String, String> copyHints,
+            EntityDuplicateModifier... modifiers);
+
+    /**
+     * @deprecated use {@link #copy(MultiTenantCopyContext, MultiTenantCloneable)}.
+     * Modifiers have been moved to a list bean 
+     * to allow easier inclusion (see {@code EntityDuplicationHelpers}) and copy hints can be added 
+     * to implementations of {@link EntityDuplicationHelper}s
+     */
+    @Deprecated
+    <T> T copy(MultiTenantCopyContext context,
+            MultiTenantCloneable<T> entity,
+            Map<String, String> copyHints,
+            EntityDuplicateModifier... modifiers);
+
+    /**
+     * Create a production duplicate of the entity specified in the params. 
+     * The is the most oft used copy method.
      *
      * @param entityClass the class for the entity
-     * @param id the primary key
-     * @param copyHints hints used to fine tune copying - generally support for hints is included in {@link MultiTenantCloneable#createOrRetrieveCopyInstance(org.broadleafcommerce.common.copy.MultiTenantCopyContext)} implementations.
-     * @param modifiers list of modifications to perform to the resulting duplicate prior to persistence
-     * @param <T> the entity type
+     * @param id          the primary key
+     * @param <T>         the entity type
+     *
      * @return the duplicated entity
      */
-    <T> T copy(Class<T> entityClass, Long id, Map<String, String> copyHints, EntityDuplicateModifier... modifiers);
+    <T> T copy(Class<T> entityClass, Long id);
 
     /**
-     * Create a production duplicate of the entity specified in the params. The is the least oft used copy method.
+     * Create a production duplicate of the entity specified in the params. 
+     * The is the least oft used copy method.
      *
-     * @param context prepopulated copy context that is setup for catalog and/or site
-     * @param entity the instance to duplicate
-     * @param copyHints hints used to fine tune copying - generally support for hints is included in {@link MultiTenantCloneable#createOrRetrieveCopyInstance(org.broadleafcommerce.common.copy.MultiTenantCopyContext)} implementations.
-     * @param modifiers list of modifications to perform to the resulting duplicate prior to persistence
-     * @param <T> the entity type
+     * @param context   prepopulated copy context that is setup for catalog and/or site
+     * @param entity    the instance to duplicate
+     * @param <T>       the entity type
+     *
      * @return the duplicated entity
      */
-    <T> T copy(MultiTenantCopyContext context, MultiTenantCloneable<T> entity, Map<String, String> copyHints, EntityDuplicateModifier... modifiers);
-
+    <T> T copy(MultiTenantCopyContext context, MultiTenantCloneable<T> entity);
 }
Index: common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicatorImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicatorImpl.java b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicatorImpl.java
--- a/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicatorImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/common/src/main/java/org/broadleafcommerce/common/persistence/EntityDuplicatorImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -25,11 +25,16 @@
 import org.broadleafcommerce.common.exception.ExceptionHelper;
 import org.broadleafcommerce.common.extension.ExtensionResultHolder;
 import org.broadleafcommerce.common.site.domain.Site;
+import org.broadleafcommerce.common.util.TransactionUtils;
 import org.broadleafcommerce.common.web.BroadleafRequestContext;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
+import java.util.Collection;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 
 import javax.annotation.Resource;
 
@@ -48,6 +53,9 @@
 
     @Resource(name = "blMultiTenantCopierExtensionManager")
     protected MultiTenantCopierExtensionManager mtCopierExtensionManager;
+    
+    @Resource(name = "blEntityDuplicationHelpers")
+    protected Collection<EntityDuplicationHelper> entityDuplicationHelpers;
 
     @Override
     public void copyEntities(final MultiTenantCopyContext context) throws Exception {
@@ -55,110 +63,205 @@
     }
 
     @Override
-    public boolean validate(Class<?> entityClass, Long id) {
+    public boolean validate(final Class<?> entityClass, final Long id) {
         if (!isActive) {
             return false;
         }
-        Object entity = genericEntityService.readGenericEntity(entityClass, id);
+        
+        final Object entity = genericEntityService.readGenericEntity(entityClass, id);
+        
         return validate(entity);
     }
 
     @Override
-    public boolean validate(Object entity) {
+    public boolean validate(final Object entity) {
         if (!isActive) {
             return false;
         }
-        ExtensionResultHolder<Boolean> response = new ExtensionResultHolder<Boolean>();
+        
+        if (!(entity instanceof MultiTenantCloneable)) {
+            return false;
+        }
+
+        final Set<EntityDuplicationHelper> helpers = 
+                filterDuplicationHelpers((MultiTenantCloneable<?>) entity);
+        
+        if (helpers.isEmpty()) {
+            return false;
+        }
+        
+        ExtensionResultHolder<Boolean> response = new ExtensionResultHolder<>();
         response.setResult(true);
+        
         if (extensionManager != null) {
             extensionManager.validateDuplicate(entity, response);
         }
+        
         return response.getResult();
     }
-
+    
+    /**
+     * Instead of passing in {@link EntityDuplicateModifier}s, add the beans to
+     * {@code EntityDuplicationHelpers}. Additionally, add copy hints to the helpers.
+     * Also, note that you should implement {@link AbstractEntityDuplicationHelper} now instead as
+     * {@link EntityDuplicateModifier} is deprecated.
+     */
+    @Deprecated
+    @Override 
+    public <T> T copy(final Class<T> entityClass,
+            final Long id,
+            final Map<String, String> copyHints,
+            final EntityDuplicateModifier... modifiers) {
+        return copy(entityClass, id, copyHints);
+    }
+     
+    /**
+     * Instead of passing in {@link EntityDuplicateModifier}s, add the beans to
+     * {@code EntityDuplicationHelpers}. Additionally, add copy hints to the helpers.
+     * Also, note that you should implement {@link AbstractEntityDuplicationHelper} now instead as
+     * {@link EntityDuplicateModifier} is deprecated.
+     */
+    @Deprecated
+    @Override 
+    public <T> T copy(final MultiTenantCopyContext context,
+            final MultiTenantCloneable<T> entity,
+            final Map<String, String> copyHints,
+            final EntityDuplicateModifier... modifiers) {
+        return copy(context, entity, copyHints);
+    }
+
+    @Transactional(TransactionUtils.DEFAULT_TRANSACTION_MANAGER)
     @Override
-    public <T> T copy(Class<T> entityClass, Long id, Map<String, String> copyHints, EntityDuplicateModifier... modifiers) {
+    public <T> T copy(final Class<T> entityClass, final Long id) {
         genericEntityService.flush();
         genericEntityService.clear();
-        Object entity = genericEntityService.readGenericEntity(entityClass, id);
-        if (!(entity instanceof MultiTenantCloneable)) {
-            IllegalArgumentException e = new IllegalArgumentException("Copying is only supported for classes implementing MultiTenantCloneable");
-            LOG.error(String.format("Unable to duplicate entity %s:%s", entityClass.getName(), id), e);
-            throw e;
+        
+        final Object entity = genericEntityService.readGenericEntity(entityClass, id);
+        
+        if (!validate(entity)) {
+            throw new IllegalArgumentException(
+                    String.format("Entity not valid for duplication - %s:%s", 
+                            entityClass.getName(), id));
         }
-        boolean isValid = validate(entity);
-        T dup;
-        if (isValid) {
-            try {
-                Site currentSite = BroadleafRequestContext.getBroadleafRequestContext().getNonPersistentSite();
-                MultiTenantCopyContext context = new MultiTenantCopyContext(null, null, currentSite, currentSite, genericEntityService, mtCopierExtensionManager);
-                if (extensionManager != null) {
-                    ExtensionResultHolder<MultiTenantCopyContext> contextResponse = new ExtensionResultHolder<MultiTenantCopyContext>();
-                    extensionManager.setupDuplicate(entity, contextResponse);
-                    if (contextResponse.getResult() != null) {
-                        context = contextResponse.getResult();
-                    }
-                }
-                dup = performCopy(context, (MultiTenantCloneable<T>) entity, copyHints, modifiers);
-            } catch (Exception e) {
-                LOG.error(String.format("Unable to duplicate entity %s:%s", entityClass.getName(), id), e);
-                throw ExceptionHelper.refineException(e);
-            } finally {
-                if (extensionManager != null) {
-                    extensionManager.tearDownDuplicate();
-                }
+        
+        final T dup;
+        
+        try {
+            final Site currentSite = 
+                    BroadleafRequestContext.getBroadleafRequestContext().getNonPersistentSite();
+            MultiTenantCopyContext context = new MultiTenantCopyContext(null, null, 
+                    currentSite, currentSite, genericEntityService, mtCopierExtensionManager);
+            
+            if (extensionManager != null) {
+                final ExtensionResultHolder<MultiTenantCopyContext> contextResponse = 
+                        new ExtensionResultHolder<>();
+                extensionManager.setupDuplicate(entity, contextResponse);
+                
+                if (contextResponse.getResult() != null) {
+                    context = contextResponse.getResult();
+                }
+            }
+            
+            dup = performCopy(context, (MultiTenantCloneable<T>) entity);
+        } catch (Exception e) {
+            throw ExceptionHelper.refineException(RuntimeException.class, RuntimeException.class,
+                    String.format("Unable to duplicate entity %s:%s", entityClass.getName(), id), 
+                    e);
+        } finally {
+            if (extensionManager != null) {
+                extensionManager.tearDownDuplicate();
             }
-        } else {
-            LOG.error(String.format("Entity not valid for duplication - %s:%s", entityClass.getName(), id));
-            throw new IllegalArgumentException(String.format("Entity not valid for duplication - %s:%s", entityClass.getName(), id));
         }
+        
         return dup;
     }
 
+    @Transactional(TransactionUtils.DEFAULT_TRANSACTION_MANAGER)
     @Override
-    public <T> T copy(final MultiTenantCopyContext context, final MultiTenantCloneable<T> entity, Map<String, String> copyHints, final EntityDuplicateModifier... modifiers) {
-        if (!(entity instanceof MultiTenantCloneable)) {
-            IllegalArgumentException e = new IllegalArgumentException("Copying is only supported for classes implementing MultiTenantCloneable");
-            LOG.error(String.format("Unable to duplicate entity %s:%s", entity.getClass().getName(), genericEntityService.getIdentifier(entity)), e);
-            throw e;
+    public <T> T copy(final MultiTenantCopyContext context, final MultiTenantCloneable<T> entity) {
+        if (!validate(entity)) {
+            throw new IllegalArgumentException(
+                    String.format("Entity not valid for duplication - %s:%s",
+                            entity.getClass().getName(),
+                            genericEntityService.getIdentifier(entity)));
         }
-        boolean isValid = validate(entity);
-        T dup;
-        if (isValid) {
-            try {
-                if (extensionManager != null) {
-                    ExtensionResultHolder<MultiTenantCopyContext> contextResponse = new ExtensionResultHolder<MultiTenantCopyContext>();
-                    extensionManager.setupDuplicate(entity, contextResponse);
-                }
-                dup = performCopy(context, entity, copyHints, modifiers);
-            } catch (Exception e) {
-                LOG.error(String.format("Unable to duplicate entity %s:%s", entity.getClass().getName(), genericEntityService.getIdentifier(entity)), e);
-                throw ExceptionHelper.refineException(e);
-            } finally {
-                if (extensionManager != null) {
-                    extensionManager.tearDownDuplicate();
-                }
+        
+        final T dup;
+        
+        try {
+            if (extensionManager != null) {
+                ExtensionResultHolder<MultiTenantCopyContext> contextResponse = 
+                        new ExtensionResultHolder<>();
+                extensionManager.setupDuplicate(entity, contextResponse);
+            }
+            
+            dup = performCopy(context, entity);
+        } catch (Exception e) {
+            throw ExceptionHelper.refineException(RuntimeException.class, RuntimeException.class,
+                    String.format("Unable to duplicate entity %s:%s", entity.getClass().getName(),
+                            genericEntityService.getIdentifier(entity)), e);
+        } finally {
+            if (extensionManager != null) {
+                extensionManager.tearDownDuplicate();
             }
-        } else {
-            LOG.error(String.format("Entity not valid for duplication - %s:%s", entity.getClass().getName(), genericEntityService.getIdentifier(entity)));
-            throw new IllegalArgumentException(String.format("Entity not valid for duplication - %s:%s", entity.getClass().getName(), genericEntityService.getIdentifier(entity)));
         }
+        
         return dup;
     }
 
-    protected <T> T performCopy(final MultiTenantCopyContext context, final MultiTenantCloneable<T> entity, Map<String, String> copyHints, final EntityDuplicateModifier... modifiers) throws Exception {
-        context.getCopyHints().putAll(copyHints);
+    /**
+     * Instead of passing in {@link EntityDuplicateModifier}s, add the beans to 
+     * {@code EntityDuplicationHelpers}. Additionally, add copy hints to the helpers.
+     * Also, note that you should implement {@link AbstractEntityDuplicationHelper} now instead as 
+     * {@link EntityDuplicateModifier} is deprecated.
+     */
+    @Deprecated
+    protected <T> T performCopy(final MultiTenantCopyContext context,
+            final MultiTenantCloneable<T> entity,
+            Map<String, String> copyHints,
+            final EntityDuplicateModifier... modifiers) throws Exception {
+        return performCopy(context, entity, copyHints);
+    }
+    
+    protected <T> T performCopy(final MultiTenantCopyContext context, 
+            final MultiTenantCloneable<T> entity) throws Exception {
+        final Set<EntityDuplicationHelper> helpers = filterDuplicationHelpers(entity);
+        putAllCopyHints(context, helpers);
         context.setForDuplicate(true);
+        
         persistCopyObjectTree(new CopyOperation<T, CloneNotSupportedException>() {
             @Override
             public T execute(T original) throws CloneNotSupportedException {
                 T response = entity.createOrRetrieveCopyInstance(context).getClone();
-                for (EntityDuplicateModifier modifier : modifiers) {
-                    modifier.modifyInitialDuplicateState(response);
+                for (final EntityDuplicationHelper helper : helpers) {
+                    helper.modifyInitialDuplicateState(response);
                 }
                 return response;
             }
         }, (Class<T>) entity.getClass(), (T) entity, context);
-        return context.getClonedVersion((Class<T>) entity.getClass(), genericEntityService.getIdentifier(entity));
+        
+        return context.getClonedVersion((Class<T>) entity.getClass(), 
+                genericEntityService.getIdentifier(entity));
+    }
+    
+    protected Set<EntityDuplicationHelper> filterDuplicationHelpers(
+            final MultiTenantCloneable entity) {
+        final Set<EntityDuplicationHelper> filteredHelpers = new HashSet<>();
+        
+        for (final EntityDuplicationHelper helper : entityDuplicationHelpers) {
+            if (helper.canHandle(entity)) {
+                filteredHelpers.add(helper);
+            }
+        }
+        
+        return filteredHelpers;
+    }
+    
+    protected void putAllCopyHints(final MultiTenantCopyContext context, 
+            final Set<EntityDuplicationHelper> helpers) {
+        final Map<String, String> hints = context.getCopyHints();
+        for (final EntityDuplicationHelper helper : helpers) {
+            hints.putAll(helper.getCopyHints());
+        }
     }
 }
Index: common/src/test/resources/blc-config/bl-test-applicationContext.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/test/resources/blc-config/bl-test-applicationContext.xml b/common/src/test/resources/blc-config/bl-test-applicationContext.xml
--- a/common/src/test/resources/blc-config/bl-test-applicationContext.xml	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/common/src/test/resources/blc-config/bl-test-applicationContext.xml	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -19,11 +19,7 @@
 
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:aop="http://www.springframework.org/schema/aop"
-       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
-           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
 
     <bean id="blMergedPersistenceXmlLocations-it" class="org.springframework.beans.factory.config.ListFactoryBean">
         <property name="sourceList">
@@ -60,5 +56,13 @@
     <bean id="root" class="java.lang.String">
         <constructor-arg index="0" value="root"/>
     </bean>
+
+    <bean id="blEntityDuplicationHelpers"
+          class="org.springframework.beans.factory.config.ListFactoryBean" scope="prototype">
+      <property name="sourceList">
+        <list>
+        </list>
+      </property>
+    </bean>
 
 </beans>
Index: core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/domain/OfferImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/domain/OfferImpl.java b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/domain/OfferImpl.java
--- a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/domain/OfferImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/domain/OfferImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -93,9 +93,10 @@
 })
 public class OfferImpl implements Offer, AdminMainEntity, OfferAdminPresentation {
 
-    public static final String EXCLUDE_OFFERCODE_COPY_HINT = "exclude-offerCodes";
     public static final long serialVersionUID = 1L;
 
+    public static final String EXCLUDE_OFFERCODE_COPY_HINT = "exclude-offer-offerCodes";
+    
     @Id
     @GeneratedValue(generator= "OfferId")
     @GenericGenerator(
Index: core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferDuplicateModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferDuplicateModifier.java b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferDuplicateModifier.java
--- a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferDuplicateModifier.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferDuplicateModifier.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -17,8 +17,12 @@
  */
 package org.broadleafcommerce.core.offer.service;
 
-import org.broadleafcommerce.common.persistence.EntityDuplicateModifier;
+import org.broadleafcommerce.common.copy.MultiTenantCloneable;
+import org.broadleafcommerce.common.persistence.AbstractEntityDuplicationHelper;
 import org.broadleafcommerce.core.offer.domain.Offer;
+import org.broadleafcommerce.core.offer.domain.OfferImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
 
 /**
@@ -27,12 +31,24 @@
  * @author Jeff Fischer
  */
 @Component("blOfferDuplicateModifier")
-public class OfferDuplicateModifier implements EntityDuplicateModifier<Offer> {
+public class OfferDuplicateModifier extends AbstractEntityDuplicationHelper<Offer> {
 
+    @Autowired
+    public OfferDuplicateModifier(final Environment environment) {
+        super(environment);
+        
+        addCopyHint(OfferImpl.EXCLUDE_OFFERCODE_COPY_HINT, Boolean.TRUE.toString());
+    }
+    
     @Override
-    public void modifyInitialDuplicateState(Offer copy) {
+    public boolean canHandle(final MultiTenantCloneable candidate) {
+        return Offer.class.isAssignableFrom(candidate.getClass());
+    }
+    
+    @Override
+    public void modifyInitialDuplicateState(final Offer copy) {
         String currentName = copy.getName();
-        copy.setName("Copy Of ("+currentName+")");
+        copy.setName(currentName + getCopySuffix());
         copy.setStartDate(null);
         copy.setEndDate(null);
     }
Index: core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferServiceImpl.java b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferServiceImpl.java
--- a/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferServiceImpl.java	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/core/broadleaf-framework/src/main/java/org/broadleafcommerce/core/offer/service/OfferServiceImpl.java	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -119,7 +119,10 @@
     @Resource(name="blEntityDuplicator")
     protected EntityDuplicator duplicator;
 
-    @Resource(name="blOfferDuplicateModifier")
+    /**
+     * @deprecated Add {@link EntityDuplicateModifier}s to {@code blEntityDuplicationHelpers}
+     */
+    @Deprecated
     protected EntityDuplicateModifier<Offer> offerDuplicateModifier;
 
     @Override
@@ -635,9 +638,7 @@
     @Transactional("blTransactionManager")
     @Override
     public Offer duplicate(Long originalOfferId) {
-        Map<String, String> copyHints = new HashMap<String, String>();
-        copyHints.put(OfferImpl.EXCLUDE_OFFERCODE_COPY_HINT, "true");
-        return duplicator.copy(OfferImpl.class, originalOfferId, copyHints, offerDuplicateModifier);
+        return duplicator.copy(OfferImpl.class, originalOfferId);
     }
 
     @Override
Index: core/broadleaf-framework/src/main/resources/bl-framework-applicationContext.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/broadleaf-framework/src/main/resources/bl-framework-applicationContext.xml b/core/broadleaf-framework/src/main/resources/bl-framework-applicationContext.xml
--- a/core/broadleaf-framework/src/main/resources/bl-framework-applicationContext.xml	(revision 38a05f5f293a89f158ab1cb815958e0ce550fed5)
+++ b/core/broadleaf-framework/src/main/resources/bl-framework-applicationContext.xml	(revision a6e1abf7db102bc5d1a471485da26a0b276d76b6)
@@ -233,4 +233,12 @@
         </property>
     </bean>
 
+    <bean id="blEntityDuplicationHelpers"
+          class="org.springframework.beans.factory.config.ListFactoryBean" scope="prototype">
+        <property name="sourceList">
+            <list>
+                <ref bean="blOfferDuplicateModifier"/>
+            </list>
+        </property>
+    </bean>
 </beans>
